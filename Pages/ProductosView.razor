@page "/productos"

@using Data.Models

<PageTitle>Productos Registrados</PageTitle>
<h1>Productos</h1>
<label for="txtNombre">Nombre</label>
<input @bind="ProductoSeleccionado!.Nombre" type="text" name="txtNombre" id="txtNombre">
<label for="txtDescripcion">Descripción</label>
<input @bind="ProductoSeleccionado!.Descripcion" type="text" name="txtDescripcion" id="txtDescripcion">
<label for="txtPrecio">Precio</label>
<input @bind="ProductoSeleccionado!.Precio" type="number" name="txtPrecio" id="txtPrecio">
<div class="mt-3"></div>
<button class='btn @(ProductoSeleccionado!.productoID==0?"btn-success":"btn-warning")' @onclick="Guardar">
    <span class='oi @(ProductoSeleccionado!.productoID==0?"oi-plus":"oi-pencil")'></span>
</button>
<div class="mt-3"></div>
<table class="table">
    <thead>
        <tr>
            <th>#</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Precio</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if(Productos!=null){
            @foreach (var producto in Productos)
        {
            <tr>
                <td>@producto.productoID</td>
                <td>@producto.Nombre</td>
                <td>@producto.Descripcion</td>
                <td>@producto.Precio.ToString("N2")</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-warning" @onclick="()=>Editar(producto.productoID)">

                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="()=>Eliminar(producto.productoID)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </td>
            </tr>
        }
        }
    </tbody>
</table>

@code {
    //https://icon-sets.iconify.design/oi/trash/
    public List<Producto>? Productos { get; set; }
    = new List<Producto>();
    async Task Cargar()
    {
        var r = await productoService.Consultar();
        if(r.Succeeded) Productos = r.Data;
    }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }
    void Editar(int Id)
    {
        ProductoSeleccionado = Productos!.FirstOrDefault(p => p.productoID == Id) ?? new Producto();
    }
    async Task Eliminar(int Id)
    {
        await productoService.Eliminar(Id);
        await Cargar();
    }

    async Task Guardar()
    {
        if (
        !string.IsNullOrEmpty(ProductoSeleccionado!.Nombre) &&
        !string.IsNullOrEmpty(ProductoSeleccionado!.Descripcion)
        )
        {
           if(ProductoSeleccionado.productoID==0)
           {
            await productoService.Crear(
            ProductoSeleccionado!.Nombre,
            ProductoSeleccionado!.Descripcion,
            ProductoSeleccionado!.Precio
            );
            return;
           }
            //Codigo para editar
           
            await Cargar();
        }
    }

    public Producto? ProductoSeleccionado { get; set; } = new Producto();
}

